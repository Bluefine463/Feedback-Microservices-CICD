trigger:
  - main

variables:
  azureServiceConnection: 'AzureServiceConnection'
  terraformVersion: '1.6.0'
  location: 'centralindia'
  microservice_list: 'eureka-server,feedback-service,user-service,genai-service,api-gateway'
  docker_tag: '$(Build.BuildId)'

stages:
  - stage: Infra
    displayName: 'Infrastructure (Terraform)'
    jobs:
      - job: Terraform
        displayName: 'Terraform init/plan/apply/outputs'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true

          - task: Bash@3
            displayName: 'Install Terraform (explicit)'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                echo "Installing unzip, jq..."
                sudo apt-get update -y
                sudo apt-get install -y unzip jq
                TFV=$(terraformVersion)
                echo "Downloading terraform ${TFV}..."
                cd /tmp
                wget -q "https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip" -O terraform.zip
                unzip -o terraform.zip
                sudo mv terraform /usr/local/bin/terraform
                terraform --version

          - task: AzureCLI@2
            name: setOutputs
            displayName: 'Terraform Explicit Commands'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail
                cd infrastructure

                echo "terraform init"
                terraform init -input=false -upgrade
                CUSTOM_BUILD_ID="383"

                NAME_PREFIX="build${CUSTOM_BUILD_ID}"
                echo "Using name_prefix=${NAME_PREFIX}"

                MS_LIST_STR="$(microservice_list)"
                TF_LIST_VAR="[\"${MS_LIST_STR//,/\",\"}\"]"
                echo "Formatted microservice list for Terraform: ${TF_LIST_VAR}"

                terraform plan -input=false -out=tfplan \
                  -var="location=$(location)" \
                  -var="name_prefix=${NAME_PREFIX}" \
                  -var="microservices=${TF_LIST_VAR}" \
                  -var="build_id=${CUSTOM_BUILD_ID}"

                terraform apply -input=false tfplan

                PREFIX=$(terraform output -raw name_prefix)
                RG=$(terraform output -raw resource_group_name)
                ACR_NAME=$(terraform output -raw acr_name)
                ACR_LOGIN=$(terraform output -raw acr_login_server)
                PG_FQDN=$(terraform output -raw postgres_fqdn)
                PG_DB=$(terraform output -raw postgres_database_name)
                PG_ADMIN=$(terraform output -raw postgres_admin_username)
                PG_PASS=$(terraform output -raw postgres_admin_password)
                ACR_USER=$(terraform output -raw acr_admin_username)
                ACR_PASS=$(terraform output -raw acr_admin_password)

                echo "##vso[task.setvariable variable=TF_PREFIX;isOutput=true]$PREFIX"
                echo "##vso[task.setvariable variable=TF_RG;isOutput=true]$RG"
                echo "##vso[task.setvariable variable=TF_ACR_NAME;isOutput=true]$ACR_NAME"
                echo "##vso[task.setvariable variable=TF_ACR_LOGIN;isOutput=true]$ACR_LOGIN"
                echo "##vso[task.setvariable variable=TF_PG_FQDN;isOutput=true]$PG_FQDN"
                echo "##vso[task.setvariable variable=TF_PG_DB;isOutput=true]$PG_DB"
                echo "##vso[task.setvariable variable=TF_PG_ADMIN;isOutput=true]$PG_ADMIN"
                echo "##vso[task.setvariable variable=TF_PG_PASS;isOutput=true]$PG_PASS"
                echo "##vso[task.setvariable variable=TF_ACR_USER;isOutput=true]$ACR_USER"
                echo "##vso[task.setvariable variable=TF_ACR_PASS;isOutput=true]$ACR_PASS"

  - stage: Build
    displayName: 'Build images (Docker) & Push to ACR'
    dependsOn: Infra
    variables:
      - group: 'MyWebApp-KeyVault-Secrets'
    jobs:
      - job: BuildAndPush
        displayName: 'Build images (Docker) & Push to ACR'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          TF_PREFIX: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PREFIX'] ]
          TF_RG: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_RG'] ]
          TF_ACR_NAME: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_NAME'] ]
          TF_ACR_LOGIN: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_LOGIN'] ]
          TF_PG_FQDN: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_FQDN'] ]
          TF_PG_DB: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_DB'] ]
          TF_PG_ADMIN: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_ADMIN'] ]
          TF_PG_PASS: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_PASS'] ]
          TF_ACR_USER: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_USER'] ]
          TF_ACR_PASS: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_PASS'] ]

        steps:
          - checkout: self
            persistCredentials: true

          - task: Bash@3
            displayName: 'Build & Scan all Java microservices with Maven/SonarCloud'
            inputs:
              targetType: 'inline'
              script: |
                set -euo pipefail
                  
                # IMPORTANT: Update this to your actual SonarCloud organization name
                SONAR_ORG="feedback-microservices-cicd" 
                  
                # We only scan the Java services, not the python 'genai-service'
                JAVA_SERVICES="api-gateway,eureka-server,feedback-service,user-service"
                  
                IFS=',' read -r -a services <<< "$JAVA_SERVICES"
                for svc in "${services[@]}"; do
                  echo "Building and Scanning $svc..."
                  
                  # This command now includes 'verify sonar:sonar' and the -D properties
                  mvn -f "services/$svc/pom.xml" clean verify sonar:sonar \
                    -Dsonar.projectKey="${SONAR_ORG}_${svc}" \
                    -Dsonar.organization=$SONAR_ORG \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.token=$(SONARTOKEN) \
                    -DskipTests
                done
            env:
              # This maps the secret variable from your Key Vault / Variable Group
              # It MUST match the secret name you created (SONARTOKEN)
              SONARTOKEN: $(SONARTOKEN)

          - task: AzureCLI@2
            displayName: 'Login to ACR and push images'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail
                PREFIX=${TF_PREFIX}
                ACR_NAME=${TF_ACR_NAME}
                ACR_LOGIN=${TF_ACR_LOGIN}
                TAG=$(docker_tag)
                az acr login --name "$ACR_NAME"
                IFS=',' read -r -a services <<< "$(microservice_list)"
                for svc in "${services[@]}"; do
                  IMAGE="${ACR_LOGIN}/${PREFIX}-${svc}:${TAG}"
                  docker build --pull -t "${IMAGE}" "services/${svc}"
                  docker push "${IMAGE}"
                  echo "${svc}=${IMAGE}" >> $(Build.ArtifactStagingDirectory)/image-mapping.txt
                done
                cat $(Build.ArtifactStagingDirectory)/image-mapping.txt

          - task: PublishPipelineArtifact@1
            displayName: 'Publish image mapping'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifact: 'image-mapping'

  - stage: Deploy
    displayName: 'Deploy containers to WebApps'
    dependsOn:
      - Build
      - Infra
    variables:
      - group: 'MyWebApp-KeyVault-Secrets'
    jobs:
      - job: DeployJob
        displayName: 'Set container images and env vars on WebApps'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          - name: TF_PREFIX
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PREFIX'] ]
          - name: TF_RG
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_RG'] ]
          - name: TF_ACR_NAME
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_NAME'] ]
          - name: TF_ACR_LOGIN
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_LOGIN'] ]
          - name: TF_PG_FQDN
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_FQDN'] ]
          - name: TF_PG_DB
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_DB'] ]
          - name: TF_PG_ADMIN
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_ADMIN'] ]
          - name: TF_PG_PASS
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_PG_PASS'] ]
          - name: TF_ACR_USER
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_USER'] ]
          - name: TF_ACR_PASS
            value: $[ stageDependencies.Infra.Terraform.outputs['setOutputs.TF_ACR_PASS'] ]

        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download image mapping'
            inputs:
              buildType: 'current'
              artifact: 'image-mapping'
              targetPath: '$(Pipeline.Workspace)/image-mapping'

          - task: AzureCLI@2
            displayName: 'Update webapps with container images and app settings'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail
                PREFIX=${TF_PREFIX}
                RG=${TF_RG}
                ACR_NAME=${TF_ACR_NAME}
                ACR_LOGIN=${TF_ACR_LOGIN}
                ACR_USER=${TF_ACR_USER}
                ACR_PASS=${TF_ACR_PASS}
                PG_HOST=${TF_PG_FQDN}
                PG_DB=${TF_PG_DB}
                PG_USER=${TF_PG_ADMIN}
                PG_PASS=${TF_PG_PASS}
                eval JWT_SECRET=\${JWT-SECRET:-}
                eval GEMINI_API_KEY=\${GEMINI-API-KEY:-}
                if [ -z "$JWT_SECRET" ] || [ -z "$GEMINI_API_KEY" ]; then
                  echo "❌ Missing JWT_SECRET or GEMINI_API_KEY"
                  echo "Debug: JWT-SECRET length: ${#JWT_SECRET:-0}, GEMINI-API-KEY length: ${#GEMINI_API_KEY:-0}"
                  exit 1
                fi
                
                EUREKA_URL="http://${PREFIX}-eureka-server.azurewebsites.net/eureka/"
                MAPFILE="$(Pipeline.Workspace)/image-mapping/image-mapping.txt"

                declare -A images
                while IFS='=' read -r svc image; do
                  images["$svc"]="$image"
                done < "$MAPFILE"

                IFS=',' read -r -a services <<< "$(microservice_list)"
                for svc in "${services[@]}"; do
                  IMAGE="${images[$svc]}"
                  APP_NAME="${PREFIX}-${svc}"

                  echo "Applying app settings for ${APP_NAME}..."
                  if [ "$svc" == "genai-service" ]; then
                    DATABASE_URL="postgresql://${PG_USER}:${PG_PASS}@${PG_HOST}:5432/${PG_DB}?sslmode=require"
                    SETTINGS=(
                      "DATABASE_URL=${DATABASE_URL}"
                      "GEMINI_API_KEY=${GEMINI_API_KEY}"
                      "GENAI_MODEL=gemini-1.5-flash"
                    )
                  else
                    JDBC_URL="jdbc:postgresql://${PG_HOST}:5432/${PG_DB}?sslmode=require"
                    SETTINGS=(
                      "SPRING_DATASOURCE_URL=$JDBC_URL"
                      "SPRING_DATASOURCE_USERNAME=$PG_USER"
                      "SPRING_DATASOURCE_PASSWORD=$PG_PASS"
                    )
                    if [[ "$svc" == "user-service" || "$svc" == "api-gateway" ]]; then
                      SETTINGS+=("JWT_SECRET=$JWT_SECRET")
                    fi
                    if [ "$svc" == "eureka-server" ]; then
                      SETTINGS+=("EUREKA_CLIENT_REGISTERWITHEUREKA=false" "EUREKA_CLIENT_FETCHREGISTRY=false")
                    else
                      SETTINGS+=("EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=$EUREKA_URL")
                    fi
                  fi

                  az webapp config appsettings set \
                    --resource-group "$RG" \
                    --name "$APP_NAME" \
                    --settings "${SETTINGS[@]}"

                  echo "Setting container for $APP_NAME -> $IMAGE"
                  az webapp config container set \
                    --name "$APP_NAME" \
                    --resource-group "$RG" \
                    --docker-custom-image-name "$IMAGE" \
                    --docker-registry-server-url "https://${ACR_LOGIN}" \
                    --docker-registry-server-user "$ACR_USER" \
                    --docker-registry-server-password "$ACR_PASS"


                  echo "⏳ Giving ${APP_NAME} some time to boot..."
                  sleep 5
                  echo " health check complete..."
                done

          - task: Bash@3
            displayName: 'List deployed web app URLs'
            inputs:
              targetType: 'inline'
              script: |
                PREFIX=${TF_PREFIX}
                IFS=',' read -r -a services <<< "$(microservice_list)"
                for svc in "${services[@]}"; do
                  echo "https://${PREFIX}-${svc}.azurewebsites.net"
                done
